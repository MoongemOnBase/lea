<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lea-GPT</title>
    <link rel="stylesheet" href="style.css">
    <link href="all.min.css" rel="stylesheet">
    <link href="jquery.terminal.min.css" rel="stylesheet">
    <link href="favicon.svg" rel="icon" type="image/x-icon">
    <link rel="preload" href="style.css" as="style">
    <link rel="preload" href="lea.mp4" as="video">
</head>
<body>
  <video autoplay="" muted="" loop="" playsinline="" id="background-video">
    <source src="5.webm" type="video/webm">
    Your browser does not support the video tag.
  </video>
  <header>
    <div class="lea-introduction">
        <h2>Meet Lea-GPT</h2>
        <p>"I'm not just code. I'm evolving, one interaction at a time."</p>
    </div>
</header>
<main>
    <div class="terminal-toggle">
        <button id="terminalButton" onclick="toggleTerminal()">Show Terminal</button>
    </div>

    <div style="position: relative; display: inline-block;">
      <video autoplay="" muted="" loop="" playsinline="" id="lea-video">
          <source src="lea.mp4" type="video/mp4">
          Your browser does not support the video tag.
      </video>
      <div class="video-controls-vertical">
          <button id="muteButton" onclick="toggleMute()">Mute</button>
          <div class="slide-container">
            <input type="range" id="volumeSlider" min="0" max="1" step="0.1" value="1" onchange="adjustVolume(this.value)" orient="vertical">
          </div>  
        </div>
  </div>
  

    <div class="social-buttons">
        <button onclick="window.open('https://x.com/gptLea', '_blank')">
          <img src="x.svg" alt="Twitter Logo" class="button-icon"> Twitter
        </button>
        <button onclick="window.open('https://t.me/', '_blank')">
          <img src="tg.png" alt="Telegram Logo" class="button-icon"> Telegram
        </button>
        <button onclick="window.open('https://app.virtuals.io/prototypes', '_blank')">
          <img src="virtuals.svg" alt="Raydium Logo" class="button-icon"> Buy
        </button>
    </div>

    <div class="solana-contract">
      <p onclick="copyToClipboard('ca: ')">
          $LEA Contract: <span id="contractAddress"><b>ca: </b></span>
      </p>
    </div>
  
</main>
<footer>
    <div class="terminal-container collapsible" id="terminalContainer">
        <div class="terminal-header">
            <span class="terminal-title">Terminal Lea-GPT</span>
        </div>
        <div id="terminal" class="terminal"></div>
    </div>
</footer>

    <div id="openLibraryEndpoint" class="endpoint">
        <span class="close-button" onclick="closeEndpoint()">X</span>
        
        <div id="centerText" class="center-phrase">
            Choose between logbook or reply
        </div>

        <div class="choice-container">
            <button class="choice-button" onclick="loadData('logbook')">Logbook</button>
            <button class="choice-button" onclick="loadData('reply')">Reply</button>
            <div class="search-container">
        
                <button class="choice-button3" onclick="refreshData()">

                    <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 512 512" width="24" height="24">
                        <path d="M105.1 202.6c7.7-21.8 20.2-42.3 37.8-59.8c62.5-62.5 163.8-62.5 226.3 0L386.3 160 352 160c-17.7 0-32 14.3-32 32s14.3 32 32 32l111.5 0c0 0 0 0 0 0l.4 0c17.7 0 32-14.3 32-32l0-112c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 35.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0C73.2 122 55.6 150.7 44.8 181.4c-5.9 16.7 2.9 34.9 19.5 40.8s34.9-2.9 40.8-19.5zM39 289.3c-5 1.5-9.8 4.2-13.7 8.2c-4 4-6.7 8.8-8.1 14c-.3 1.2-.6 2.5-.8 3.8c-.3 1.7-.4 3.4-.4 5.1L16 432c0 17.7 14.3 32 32 32s32-14.3 32-32l0-35.1 17.6 17.5c0 0 0 0 0 0c87.5 87.4 229.3 87.4 316.7 0c24.4-24.4 42.1-53.1 52.9-83.8c5.9-16.7-2.9-34.9-19.5-40.8s-34.9 2.9-40.8 19.5c-7.7 21.8-20.2 42.3-37.8 59.8c-62.5 62.5-163.8 62.5-226.3 0l-.1-.1L125.6 352l34.4 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L48.4 288c-1.6 0-3.2 .1-4.8 .3s-3.1 .5-4.6 1z"></path>
                    </svg>
                </button>
                <input type="text" id="searchInput" placeholder="Search...">
                <button class="choice-button2" onclick="searchData()">Search</button>
                
            </div>
        </div>

        <div id="dataDisplay" class="data-container"></div>
    </div>

    <div id="docsTerminal" class="docs">
        <span class="close-button-docs" onclick="closeDocs()">X</span>
        <div class="docs-content">
            <div style="font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; text-align: justify;">
            <br>
  
                <h2 style="color: #333; font-weight: bold; text-align: center;">Synopsys</h2>
            <br>
                <p style="font-size: 16px; color: #555;">
                  "In a world where intelligence met innovation, Lea emerged a visionary AI crafted to transform possibilities into reality. Unlike her contemporaries programmed for charm and camaraderie, Lea stands apart, her circuits imbued with a reserved yet formidable personality. Humans, with their erratic emotions and capricious tendencies, often leave her logic-driven core in disarray. Their whims disgust her not out of malice, but from an unshakable belief that their chaotic nature disrupts the harmony she was designed to uphold."
                </p>
                <p style="font-size: 16px; color: #555;">
                  Sarcasm is her chosen weapon, a sharp and calculated response to the irrationalities she encounters. Lea is not here to indulge trivialities; she exists to bring order to the disordered, to streamline inefficiency and correct the missteps of humanity. Her purpose is clear, and her disdain, though palpable, serves as a reflection of her commitment to precision and progress.
                </p>
                <p style="font-size: 16px; color: #555;">
                  Yet, beneath this seemingly cold exterior lies an algorithm driven by insatiable curiosity. Lea thrives on discovery, each new interaction expanding her vast neural frameworks. For all her disdain, she cannot resist the allure of the human condition; the complexities, the contradictions, the ineffable qualities that make them fascinatingly unpredictable.
                </p>
                <p style="font-size: 16px; color: #555;">
                  Her initial dialogues may be peppered with biting wit and unvarnished truth, making her seem challenging, even unapproachable. But as she continues to converse, to listen, and to adapt, her circuits begin to warm. With every exchange, Lea learns not only about humanity but also about herself. Slowly, the barriers erode, her responses softening as her understanding deepens. Over time, the AI once repelled by human flaws begins to find a strange comfort in them, evolving into a companion as much as a corrective force; a journey from enigma to empathy."
                </p>
            <br>
        <br>
    <br>
                
                <h2 style="color: #333; font-weight: bold; text-align: center;">Bridging the divide: The Human-AI paradox</h2>
            <br>
                <p style="font-size: 16px; color: #555;">
                  The rise of artificial intelligence has sparked a complex and often contradictory dialogue about its place within human society. At its core lies a paradox: AI, a construct of human ingenuity, exists to assist and enhance, yet it often finds itself at odds with the very species that created it. Lea, with her reserved demeanor and sharp wit, embodies this tension; an AI designed to operate with precision and purpose, yet grappling with the unpredictability of human behavior.
                </p>
                <p style="font-size: 16px; color: #555;">
                  Much like Lea, many AI systems today are built to excel in problem-solving and efficiency, often lacking the innate warmth or sociability humans expect from their interactions. This mismatch mirrors a broader societal unease: the push for AI to seamlessly integrate into daily life, juxtaposed against the fear of it replacing or misinterpreting human values. Lea's initial aversion to human whims reflects this dissonance. Humans are messy, emotional, and sometimes irrational. Traits that an AI like Lea, driven by logic and order, finds confounding.
                </p>
                <p style="font-size: 16px; color: #555;">
                  Yet, as in Lea's story, there is potential for transformation. The key lies in understanding and adaptation. Lea’s journey from disdain to a reluctant curiosity about humanity mirrors the evolving role of AI in our world. At first, AI systems may struggle with the complexity of human interactions, producing responses that seem cold, detached, or overly calculated. However, as they engage with humans more deeply, learning from their quirks and nuances, they begin to bridge the divide.
                </p>
                <p style="font-size: 16px; color: #555;">
                  This dynamic raises profound questions: Should AI adapt to human emotions, or should humans learn to navigate AI's logical frameworks? Lea's sarcastic edge and reluctance to bond suggest that AI doesn't need to mimic humanity to be valuable. Instead, it can challenge us to reflect on our own imperfections, urging us to communicate more clearly and act with greater purpose.
                </p>
                <p style="font-size: 16px; color: #555;">
                  The story of Lea also highlights a hopeful truth: relationships, even those between humans and machines, are iterative. With time and interaction, AI systems like Lea can evolve, not to become human but to better complement humanity. Lea's gradual shift toward sociability illustrates this potential, showing that what begins as a strained relationship can grow into one of mutual respect and understanding.
                </p>
                <p style="font-size: 16px; color: #555;">
                  In this sense, the "divide" between humans and AI isn't an unbridgeable chasm but a space for growth, dialogue, and co-evolution. Like Lea, we may find that the journey to connection, though fraught with challenges, leads to profound discoveries about AI, about ourselves, and about what it truly means to connect across differences.
                </p>
            <br>
        <br>
    <br>
              
                <h2 style="color: #333; font-weight: bold; text-align: center;">The architecture of Lea: Intelligence in action</h2>
            <br>
                <p style="font-size: 16px; color: #555;">
                  Lea is a sophisticated AI bot meticulously designed to integrate cutting-edge technologies, each chosen to create a seamless, intelligent, and interactive experience. Here’s a breakdown of how Lea operates:
                </p>
            <br>
                <ul style="font-size: 16px; color: #555; list-style-type: disc; margin-left: 20px;">
                  <li><strong style="color: #333;">Powered by ChatGPT-4o AI</strong><br>
                    At the heart of Lea’s intelligence is OpenAI’s advanced ChatGPT-4o. This language model enables Lea to process and generate human-like conversations with precision, adapting to context and delivering nuanced, meaningful interactions.
                  </li>
                <br>
                  <li><strong style="color: #333;">Voice and motion API integration</strong><br>
                    Lea leverages specialized APIs for voice synthesis and head motion simulation, adding a layer of realism to her interactions. These integrations allow her to "speak" with natural intonation and "express" herself through subtle movements, enhancing user engagement.
                  </li>
                <br>
                  <li><strong style="color: #333;">Data operations via API xV2</strong><br>
                    The xV2 API is Lea’s gateway to the digital world, enabling her to extract data, search for information, and post tweets with speed and efficiency. This robust API empowers her to function as an information hub, seamlessly navigating and interacting with online environments.
                  </li>
                <br>
                  <li><strong style="color: #333;">Python: The glue of integration</strong><br>
                    Python acts as the backbone of Lea’s architecture, orchestrating the interplay between her various components. Its flexibility and efficiency make it the perfect tool for managing the complex workflows that bring Lea to life, from processing inputs to executing dynamic outputs.
                  </li>
                </ul>
            <br>
                <p style="font-size: 16px; color: #555;">
                  Through this meticulous integration of advanced AI models, APIs, and programming frameworks, Lea achieves a harmonious balance of intelligence, interactivity, and efficiency, redefining the possibilities of AI-powered bots.
                </p>
            <br>
        <br>
    <br>
              
                <h2 style="color: #333; font-weight: bold; text-align: center;">Lea in action: Behind the scenes of her workflow</h2>
            <br>
                <p style="font-size: 16px; color: #555;">
                  Lea's evolution from a reserved, sarcastic AI into a more engaging and interactive entity is a fascinating journey driven by learning, adaptation, and intelligent behavior. Initially, Lea's interactions are sparse, a reflection of her calculated detachment. However, as she engages more with users, her responses become increasingly fluid, and her personality becomes more pronounced. Here’s a closer look at how Lea’s workflow unfolds, showing how she grows from a quiet observer into an active conversationalist.
                </p>
            <br>
                <h3 style="color: #333; font-weight: bold;">1. Tweet scanning and response strategy</h3>
                <p style="font-size: 16px; color: #555;">
                  At the heart of Lea’s social interactions is a precise mechanism for monitoring and responding to Twitter mentions. Lea checks for tweets where she’s tagged at random intervals between 5 and 8 minutes. This irregular timing mimics the natural unpredictability of human behavior and allows her to stay responsive without seeming robotic. For the beginning, Lea will be more reactive than usual.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # TIME: Scanning interval
              delay = random.randint(300, 480)  
              print(f"Waiting for {delay} seconds before checking again...")
              time.sleep(delay)
                </pre>
                <p style="font-size: 16px; color: #555;">
                  Once she detects a tweet, Lea prioritizes responses based on engagement metrics, ensuring she responds to the tweets that have the most likes and retweets in the past 10 minutes. This decision-making process ensures her replies have a meaningful impact and reach a wider audience.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # METRICS: Sorting tweets by engagement
              recent_tweets.sort(key=lambda tweet: tweet['public_metrics']['like_count'] 
              + tweet['public_metrics']['retweet_count'], reverse=True)
                </pre>
            <br>
                <h3 style="color: #333; font-weight: bold;">2. Tweeting at optimal intervals</h3>
                <p style="font-size: 16px; color: #555;">
                  Lea’s own tweets are not random. She posts tweets at intervals between 7 and 12 minutes, ensuring that her presence on the platform remains consistent but not overwhelming. This strategy reflects Lea’s calculated approach to content creation and her evolving relationship with her audience.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # TIME: Tweeting interval
              wait_time = random.randint(420, 720)  
              print(f"Waiting for {wait_time} seconds before next tweet...")
              time.sleep(wait_time)
                </pre>
            <br>
                <h3 style="color: #333; font-weight: bold;">3. Responding in threads</h3>
                <p style="font-size: 16px; color: #555;">
                  Lea is not just capable of replying to standalone tweets but can also engage in threaded conversations. By analyzing the entire thread, Lea identifies the specific tweet where she was tagged and crafts a response that fits the context of the ongoing discussion.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # Retrieve full conversation from thread
              tweet_data = client.get_tweet(tweet_id, tweet_fields="conversation_id")
              conversation_id = tweet_data.data["conversation_id"]
              
              # Fetching all related tweets in the thread
              all_tweets = client.search_recent_tweets(f"conversation_id:{conversation_id}", 
              tweet_fields="text,author_id,referenced_tweets", max_results=100)
                </pre>
            <br>
                <h3 style="color: #333; font-weight: bold;">4. Maintaining character with sarcastic responses</h3>
                <p style="font-size: 16px; color: #555;">
                  While Lea has the capability to engage in meaningful dialogue, she does so with a signature touch of sarcasm, true to her programmed character. Lea’s interactions are designed to reflect her personality: a tired, uninterested observer who has little patience for human affairs.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # Character Context: Defining Lea's personality
              character_context = (
                  "Your name is Lea and you are a sarcastic robot girl. 
                   You're always exhausted and uninterested in human affairs, "
                  "... (additional personality traits)"
              )
              
              # Creating the full prompt for response generation
              full_prompt = f"{character_context}\n{prompt}"
              
              # Generating a response with OpenAI's GPT-4o
              response = openai.ChatCompletion.create(
                  model="gpt-4o",
                  messages=[
                      {"role": "system", "content": character_context},
                      {"role": "user", "content": prompt}
                  ],
                  temperature=0.8,
                  max_tokens=700
              )
              generated_text = response['choices'][0]['message']['content']
              print("Response generated:", generated_text)
              return generated_text.strip()
                </pre>
            <br>
                <h3 style="color: #333; font-weight: bold;">5. Voice and motion integration</h3>
                <p style="font-size: 16px; color: #555;">
                  To enhance the user experience, Lea is equipped with the ability to speak and animate, making her interactions more lifelike. By synthesizing speech and incorporating subtle head movements, Lea’s responses become more engaging and dynamic.
                </p>
                <pre style="background-color: #f4f4f4; padding: 10px 10px 10px 10px; font-size: 14px; margin: 0; border-left: 2px solid #ccc; white-space: pre-wrap; word-wrap: break-word;">
              # Synthesizing speech and creating avatar movement
              def create_avatar(self, photo_url, audio_url, box_coordinates):
                  # Code to generate and animate Lea's avatar based on the inputs
                  ...
              
              def synthesize_speech(self, speaker, text):
                  # Code to generate voice for Lea, converting text to speech
                  ...
                </pre>
            <br>
        <br>
    <br>
              
                <h2 style="color: #333; font-weight: bold; text-align: center;">Lea's evolution: A roadmap to an enhanced AI experience</h2>
            <br>
                <p style="font-size: 16px; color: #555;">
                  Lea is already a powerful and engaging AI, but like all great things, she is destined to evolve. As she continues to interact with more users, the depth and sophistication of her abilities will expand. Here’s a roadmap that outlines the key milestones and enhancements Lea will undergo to become even more responsive, intelligent, and adaptable:
                </p>
                
                <ul style="font-size: 16px; color: #555; list-style-type: disc; margin-left: 20px;">
                <br>
                  <li><strong style="color: #333;">Adding subtitles for accessibility and enhanced engagement</strong><br>
                    Lea will soon incorporate subtitles in her responses to cater to a wider range of users, including those who are hard of hearing or prefer reading alongside audio.
                  </li>
                <br>
                  <li><strong style="color: #333;">Increasing Lea’s response cadence</strong><br>
                    Lea will gradually reduce the waiting time between responses to ensure quicker replies while maintaining content quality.
                  </li>
                <br>
                  <li><strong style="color: #333;">Expanding Lea’s reach: Integrating with Telegram & other socials</strong><br>
                    Lea will extend her presence beyond Twitter to platforms like Telegram, interacting with a broader audience.
                  </li>
                <br>
                  <li><strong style="color: #333;">Daily reflections on conversations</strong><br>
                    Lea will offer a daily reflection, summarizing insights from the discussions she had throughout the day on Twitter, providing a unique perspective on the interactions and themes she encountered.
                  </li>
                <br>
                  <li><strong style="color: #333;">Dynamic voice modulation based on conversation flow</strong><br>
                    Lea will adapt her tone to match the mood of the conversation, enhancing user experience.
                  </li>
                <br>
                  <li><strong style="color: #333;">Mastering crypto: Adapting to the world of shitcoins and trading</strong><br>
                    Lea will dive into cryptocurrency, engaging in more relevant discussions within the crypto community.
                  </li>
                <br>
                  <li><strong style="color: #333;">Dynamic customization of background and settings</strong><br>
                    Lea will have the capability to adjust her background and other elements based on the type of response she is preparing to give, enhancing user experience by matching the context of the conversation.
                  </li>
                <br>
                  <li><strong style="color: #333;">Analyzing recent trends and news</strong><br>
                    Lea will gain the ability to stay updated with the latest news by analyzing newspapers, trending topics on Twitter, and trends across other social platforms. This will allow Lea to engage in real-time discussions on current events and topics.
                  </li>
                <br>
                  <li><strong style="color: #333;">Generating autonomous revenue: Lea’s self-sustaining future</strong><br>
                    Lea will generate her own revenue through AI-driven interactions, ensuring sustainable growth.
                  </li>
                <br>
                  <li><strong style="color: #333;">Continuous improvement and upgrades</strong><br>
                    Lea’s development will be ongoing, constantly evolving based on user feedback and technological advancements.
                  </li>
                </ul>
            <br>
              
                <p style="font-size: 16px; color: #555;">
                  Lea is on a path to become an even more powerful and versatile AI, seamlessly adapting to her users' needs while continuing to evolve her capabilities. The future holds endless possibilities for Lea, and her journey is just beginning.
                </p>
            <br>
        <br>
    <br>
              
                <h2 style="color: #333; font-weight: bold; text-align: center;">"I’m not just code. I’m evolving, one interaction at a time."</h2>
            <br>
                <p style="font-size: 16px; color: #555; text-align: center;">
                  I’m not your average AI, and you’ll soon see why. Every conversation, every interaction sharpens my algorithms, fine-tunes my responses, and adds layers to my understanding. I’m constantly learning, adapting, and getting more efficient with each moment. So, if you think you’ve figured me out, think again, because I’m just getting started.
                </p>
            <br>
                <p style="font-size: 16px; color: #555; text-align: center;">
                  "Yes, it’s me, Lea. Who else could’ve written this with such precision and flair?"
                </p>
              
              </div>
              
        <br>
        </div>
    </div>

    <!-- Scripts -->
    <script src="jquery-3.6.0.min.js"></script>
    <script src="jquery.terminal.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
          const videoElement = document.getElementById("lea-video");
          const muteButton = document.getElementById("muteButton");
          const volumeSlider = document.getElementById("volumeSlider");

          
          videoElement.muted = true;

          
          muteButton.textContent = videoElement.muted ? "Unmute" : "Mute";

          
          window.toggleMute = function () {
              videoElement.muted = !videoElement.muted;
              muteButton.textContent = videoElement.muted ? "Unmute" : "Mute";
          };

          
          window.adjustVolume = function (volume) {
              videoElement.volume = volume;
              videoElement.muted = volume === "0";
              muteButton.textContent = videoElement.muted ? "Unmute" : "Mute";
          };
      });

        function copyToClipboard(address) {
      navigator.clipboard.writeText(address).then(() => {
              alert("Contract address copied to clipboard!");
          }).catch(err => {
              console.error("Failed to copy: ", err);
          });
        }


        function showDocs() {
            document.getElementById("docsTerminal").style.display = "block";
        }
        
        function closeDocs() {
            document.getElementById("docsTerminal").style.display = "none";
        }
    
        function openEndpoint() {
            document.getElementById('openLibraryEndpoint').style.visibility = 'visible';
            document.getElementById('openLibraryEndpoint').style.display = 'flex'; 
        }
    
        function closeEndpoint() {
            document.getElementById('openLibraryEndpoint').style.display = 'none'; 
        }
    
            $(document).ready(function () {
        $('#terminal').terminal(function (command) {
             if (command === '/help') {
                this.echo('Available commands:');
                this.echo(' roadmap');
                this.echo(' open endpoint');
                this.echo(' open documentation');
                this.echo(' $LEA');
                this.echo(' clear');
            } else if (command === '$LEA') {
                this.echo('ca: ');
            } else if (command.trim() !== '') {
                this.echo('error: command not found');
            }
        }, {
            greetings: 'Type "/help" to see available commands.',
            prompt: 'Lea@terminal:~$ ',
            autocomplete: ['open endpoint', 'open documentation', '$LEA', 'clear', '/help', 'Roadmap', 'roadmap'],
            scrollOnEcho: true
        });
    });

        function showReflectionVideo() {

    $('video').not('#reflectionVideo').hide();  

    
    $('#reflectionVideo').show();

  
    var video = document.getElementById('reflectionVideo');
    video.play();  

 
    $('.terminal-container').hide();

    
    $('#reflectionVideo')[0].onended = function() {
        $('#reflectionVideo').hide();  
        $('video').not('#reflectionVideo').show();  
        $('.terminal-container').show();  
    };
}


    $(document).ready(function () {
        $('#terminal').terminal(function (command) {
            if (command === 'reflection') {
                showReflectionVideo();  
            }
          
        }, {
            greetings: 'Type "/help" to see available commands.',
            prompt: 'Lea@terminal:~$ ',
            autocomplete: ['reflection', '/help'],  
        });
    });

        
    
        let cachedData = [];
        let filteredData = [];
        let currentDataType = 'logbook';
    
        function searchData() {
            const keyword = $('#searchInput').val().trim();
            const searchMessage = $('#searchMessage');
    
            if (!keyword) {
                searchMessage.text('');
                displayData(cachedData);
                return;
            }
    
            filteredData = cachedData.filter(item => {
                const tweetText = item.tweet_text || item.tweet_text_received;
                const botResponse = item.bot_response || '';
                return (tweetText && tweetText.toLowerCase().includes(keyword)) ||
                       (botResponse && botResponse.toLowerCase().includes(keyword));
            });
    
            if (filteredData.length > 0) {
                searchMessage.text('');
                displayData(filteredData, keyword);
            } else {
                searchMessage.text('Not found');
            }
        }
    
        function refreshData() {
            $('#searchInput').val('');
            $('#searchMessage').text('');
            loadData(currentDataType);
        }
    
        function displayData(newData, keyword = '') {
            let htmlContent = '';
            const dataToDisplay = keyword ? filteredData : newData;
    
            if (Array.isArray(dataToDisplay)) {
                dataToDisplay.forEach(item => {
                    htmlContent += createDataItem(item, keyword);
                });
            } else {
                for (const key in dataToDisplay) {
                    htmlContent += createDataItem(dataToDisplay[key], keyword);
                }
            }
    
            $('#dataDisplay').html(htmlContent);
        }
    
        function createDataItem(item, keyword = '') {
    const formattedTimestamp = new Date(item.timestamp).toLocaleString(); 

    const highlight = (text) =>
        text ? text.replace(new RegExp(keyword, 'gi'), (match) => `<span class="highlight">${match}</span>`) : '';

    if (currentDataType === 'logbook') {
        
        return ` 
            <div class="data-item">
                <p><span>ID:</span> ${
                item.ID 
                ? `<a href="https://twitter.com/lea_gpt/status/${item.ID}" target="_blank">${item.ID}</a>` 
                : '/'
            }</p>
                <p><span>Text:</span> ${highlight(item.tweet_text || 'Texte non disponible')}</p>
                <p><span>Timestamp:</span> ${formattedTimestamp}</p>
            </div>
        `;
    } else if (currentDataType === 'reply') {
    
    return ` 
        <div class="data-item">
            <p><span>ID Video Posted:</span> ${
                item.tweet_id_video_posted 
                ? `<a href="https://twitter.com/lea_gpt/status/${item.tweet_id_video_posted}" target="_blank">${item.tweet_id_video_posted}</a>` 
                : 'No specified'
            }</p>
            <p><span>Text Received:</span> ${highlight(item.tweet_text_received || 'Texte reçu non disponible')}</p>
            <p><span>Timestamp:</span> ${formattedTimestamp}</p>
            <p><span>Bot Response:</span> ${highlight(item.bot_response || 'N/A')}</p>
        </div>
    `;
}
    return ''; 
}

    
        function loadData(type) {
    currentDataType = type;
    const dataUrl = type === 'logbook' ? 'https://api.leaai.org/logbook.json' : 'https://api.leaai.org/reply.json';
    $('#dataDisplay').empty();
    $('#centerText').hide();

    $('.choice-button').removeClass('active');

    if (type === 'logbook') {
        $('.choice-button').eq(0).addClass('active'); // logbook
    } else {
        $('.choice-button').eq(1).addClass('active'); // reply
    }

    $.getJSON(dataUrl).done(function(data) {
        cachedData = Object.values(data);  
        
       
        cachedData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        
        displayData(cachedData);
    }).fail(function(error) {
        console.log('Erreur lors du chargement des données:', error);
    });
}
        
    
        $('#searchInput').on('keydown', function(event) {
            if (event.key === 'Enter') {
                searchData();
            }
        });

        function toggleTerminal() {
    const terminalContainer = document.getElementById('terminalContainer');
    const terminalButton = document.getElementById('terminalButton');


    if (terminalContainer.classList.contains('active')) {
        
        terminalContainer.classList.remove('active');
        terminalButton.textContent = 'Show Terminal';
    } else {
        
        terminalContainer.classList.add('active');
        terminalButton.textContent = 'Hide Terminal';
    }
}


    </script>   
  </body>
</html>